@require: base/option-ext
@import: fss
@import: font/axes
@import: font/set
@import: fonts

module FssMutableInternal : sig
  direct \font-set : [font-set; inline-text] inline-cmd
  direct \font-style : [(font-axes -> font-axes) list; inline-text] inline-cmd

  val set-debug-level : int -> unit
end = struct
  let-mutable current-font-set <- Fonts.default-font-set
  let-mutable current-font-axes <- Fonts.default-font-axes

  let-mutable current-debug-level <- 0
  let set-debug-level level =
    current-debug-level <- level

  let debug-message level context message =
    if !current-debug-level >= level
    then display-message (`fss/mutable: `# ^ context ^ `: `# ^ message)
    else ()

  let update-font-axes f =
    let fa = f !current-font-axes in
    current-font-axes <- fa

  let with-font-set ?:context ctx fs f =
    let context = Option.unwrap-or `with-font-set` context in
    let previous-fs = !current-font-set in
    let () = current-font-set <- fs in
    let fa = !current-font-axes in
    let () = debug-message 1 context (FontSet.to-string previous-fs ^ #` -> `# ^ FontSet.to-string fs) in
    let result = f fs fa ctx in
    let () = current-font-set <- previous-fs in
    result

  let with-style ?:context ctx ss f =
    let context = Option.unwrap-or `with-style` context in
    let previous-fa = !current-font-axes in
    let fa = List.fold-left (fun fa s -> s fa) previous-fa ss in
    let () = debug-message 1 context (FontAxes.to-string previous-fa ^ #` -> `# ^ FontAxes.to-string fa) in
    let () = current-font-axes <- fa in
    let fs = !current-font-set in
    let result = f fs fa ctx in
    let () = current-font-axes <- previous-fa in
    result

  let-inline ctx \font-set fs it =
    with-font-set ?:`\font-set` ctx fs (fun fs fa ctx ->
      read-inline ctx {\Fss.text-font(fs)(fa)(it);}
    )

  let-inline ctx \font-style ss it =
    with-style ?:`\font-style` ctx ss (fun fs fa ctx ->
      read-inline ctx {\Fss.text-font(fs)(fa)(it);}
    )

end

let-inline ctx \font-set fs it =
  read-inline ctx {\FssMutableInternal.font-set(fs)(it);}

let-inline ctx \font-style ss it =
  read-inline ctx {\FssMutableInternal.font-style(ss)(it);}
