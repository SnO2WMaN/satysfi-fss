@import: fonts

module FssMutableInternal : sig
  direct \font-set : [font-set; inline-text] inline-cmd
  direct \font : [(font-axes -> font-axes) list; inline-text] inline-cmd
end = struct
  let-mutable current-font-set <- Fonts.default-font-set
  let-mutable current-font-axes <- Fonts.default-font-axes

  let debug-font-axes context fa =
    display-message (`fss/mutable: `# ^ context ^ `: `# ^ Fss.font-axes-to-string fa)

  let update-font-axes f =
    let fa = f !current-font-axes in
    current-font-axes <- fa

  let-inline ctx \font-set fs it =
    let previous-fs = !current-font-set in
    let () = current-font-set <- fs in
    let fa = !current-font-axes in
    let bt = read-inline ctx {\Fss.text-font(fs)(fa)(it);} in
    let () = current-font-set <- previous-fs in
    bt

  let-inline ctx \font f it =
    let previous-fa = !current-font-axes in
    let fa = List.fold-left (fun fa f -> f fa) previous-fa f in
    let () = debug-font-axes `\font previous` previous-fa in
    let () = debug-font-axes `\font new` fa in
    let () = current-font-axes <- fa in
    let fs = !current-font-set in
    let bt = read-inline ctx {\Fss.text-font(fs)(fa)(it);} in
    let () = current-font-axes <- previous-fa in
    bt
end

let bold fs = (| fs with weight = 180. ; style = (| fs#style with weight = `Bold` |) |)
let medium fs = (| fs with weight = 80. ; style = (| fs#style with weight = ` ` |) |)

let upright fs = (| fs with slant = 0  ; style = (| fs#style with style = ` ` |) |)
let italic fs = (| fs with slant = 100 ; style = (| fs#style with style = `Italic` |) |)

let-inline ctx \font-set fs it =
  read-inline ctx {\FssMutableInternal.font-set(fs)(it);}

let-inline ctx \font f it =
  read-inline ctx {\FssMutableInternal.font(f)(it);}