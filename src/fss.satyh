@import: font/combination
@import: font/context
@import: font/selection
@import: font/set
@import: mutable


module Fss : sig

  val \text-font-combination : [font-combination; inline-text] inline-cmd
  val \text-font : [font-set; font-axes; inline-text] inline-cmd

  direct \font-set : [font-set; inline-text] inline-cmd
  direct +font-set : [font-set; block-text] block-cmd

  direct \font-style : [(extended-context -> extended-context) list; inline-text] inline-cmd
  direct +font-style : [(extended-context -> extended-context) list; block-text] block-cmd

  val set-debug-level : int -> unit

end = struct

  let module-name = `fss/fss`

  let-mutable current-debug-level <- 0

  let set-debug-level level =
    let () = FontSelection.set-debug-level level in
    let () = FssMutableInternal.set-debug-level level in
    current-debug-level <- level

  let debug-font-combination level context font-comb =
    if !current-debug-level >= level
    then
      display-message (module-name ^ `: `# ^ context ^ `: `# ^ FontCombination.to-string font-comb)
    else ()


  let-rec set-font-combination font-comb ctx =
    match font-comb with
    | [] -> ctx
    | (font-pair :: font-comb) ->
      let font-triple =
        (font-pair#font#font-name, font-pair#font#ratio, font-pair#font#rising)
      in
      set-font (FontScript.to-satysfi-script font-pair#script) font-triple (set-font-combination font-comb ctx)

  let-inline ctx \text-font-combination font-comb it =
    let ctx =
      ctx |> set-font-combination font-comb
    in
    read-inline ctx it

  let with-font font-set font-axes ctx =
    let font-comb =
      FontSelection.find-optimal-font font-set (ctx, font-axes)
    in
    let () = debug-font-combination 2 `with-font: ` font-comb in
    set-font-combination font-comb ctx

  let-inline ctx \text-font font-set font-axes it =
    let ctx =
      ctx |> with-font font-set font-axes
    in
    read-inline ctx it

  let with-font-set msg-context override ctx fs f =
    let current-fs = FssMutableInternal.get-font-set ctx in
    let fs =
      if override
      then fs
      else FontSet.combine current-fs fs
    in
    FssMutableInternal.with-font-set ?:msg-context ctx fs (fun fs (ctx, fa) ->
      (let ctx = with-font fs fa ctx in
      f ctx)
    )

  let-inline ctx \font-set fs it =
    with-font-set `\font-set` true ctx fs (fun ctx -> read-inline ctx it)

  let-block ctx +font-set fs bt =
    with-font-set `+font-set` true ctx fs (fun ctx -> read-block ctx bt)

  let with-font-style msg-context ctx ss f =
    FssMutableInternal.with-font-style ?:msg-context ctx ss (fun fs (ctx, fa) ->
      (let ctx = with-font fs fa ctx in
      f ctx)
    )

  let-inline ctx \font-style ss it =
    with-font-style `\font-style` ctx ss (fun ctx -> read-inline ctx it)

  let-block ctx +font-style ss it =
    with-font-style `+font-style` ctx ss (fun ctx -> read-block ctx it)

end
